////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			해더 파일
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <windows.h>
#include <conio.h>

#define SIZE 20													// SIZE 의 값을 100으로 정의
 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			구조체 배열 구성
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct person {
	char name[SIZE];												// 이름 저장
	char cellPhone[SIZE];											// 핸드폰 번호 저장
	char etc[SIZE];													// 추가적인 메모 저장

} PERSON;												     		// PERSON 타입의 이름을 가지는 구조체로 정의


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			기능들 함수 처리
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	void menu();														// 메인 메뉴 페이지
	void gotoxy(int x, int y);											// 화면 이미지 보정용

	void print_record(PERSON data);										// 내용을 화면에 표시 

	void search_record(FILE *fp);										// 검색 기능

	void print_all_data(FILE *fp);										// 모든 데이터 출력

	void add_record(FILE *fp);											// 추가 기능 

	void delete_record(FILE *fp);										// 파일 삭제

	void system_down();													// 종료

	char seps[] = " \n";												// 구조체 토큰 불리자 분리기호
	char *token;														// 토큰

	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			시작
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void) {
	FILE *fp;
	int select;
	
	if ((fp = fopen("address.txt", "a+")) == NULL) {				// 현재 fopen을 사용했으나 fopen_s로 수정을 권장
																	// SDL 검사를 막아 임시적으로 실행 되도록 하였다.
		fprintf(stderr, "입력을 위한 파일을 열 수 없습니다\n");
		exit(1);
	}

	while (1) {
		menu();														// 화면 메뉴 출력
		
		printf("□       [사용할 기능의 번호를 입력해 주세요]\n");  // 화면 그리기
		printf("\n");
		printf("□               [입력] : "); 

	
		scanf_s("%d", &select);

		switch (select) {											// 사용할 기능 선택 스위치문
																	// 번호를 입력을 통해 각 번호에
																	// 해당하는 기능을 실행

		case 1: search_record(fp);									// 검색 기능을 불러옴
			break;
		case 2: print_all_data(fp);									// 목록 기능을 불러옴
			break;
		case 3: add_record(fp);										// 저장 기능을 불러옴
			break;
		case 4: delete_record(fp);									// 삭제 기능을 불러옴
			break;
		case 5: {system_down(); fclose(fp); return 0; }				// 종료 기능을 불러옴, 파일을 닫음, 
																	// 0값을 반환후 종료

		}

		printf("\n");
		printf("□                                                  □\n");
		printf("□ 아무키나 입력하여 기능 종료...                   □\n");
		getchar();	
		system("cls");												// 키 입력을 받아 처음으로 돌아간다
	}
	fclose(fp);														// 파일을 닫음

	return 0;														// 0값을 반환후 종료
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			메뉴보이기
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void menu() {

	int x;

	for (x = 10; x <= 50; x++) {									// 양측 라인 출력
		gotoxy(1, x); printf("□");									// 가능하면 출력 사이즈에 맞게 출력하고싶음
		gotoxy(53, x); printf("□");								// 높이를 한줄씩 내리며 문자를 화면에 출력
	}
	gotoxy(1, 1);													// 1,1위치로 이동

																	// 메인 화면에 보여질 내용
	printf("□□□□□□□□□□□□□□□□□□□□□□□□□□□\n");			
	printf("□                                                  □\n");			
	printf("□         [전     화     번     호     부]         □\n");
	printf("□                                                  □\n");
	printf("□□□□□□□□□□□□□□□□□□□□□□□□□□□\n");
	printf("□                                                  □\n");
	printf("□ 1.[검색]  2.[목록]  3.[추가]  4.[삭제]  5.[종료] □\n");
	printf("□                                                  □\n");
	printf("□                                                  □\n");

	
}

void gotoxy(int x, int y) {														// 화면 보정용 함수
	COORD Pos = { x - 1, y - 1 };												// 특정 좌표에 원하는 문자 출력가능
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			1번 검색 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

																				////////////////////////////////////
void search_record(FILE *fp) {													// 검색

	char name[SIZE];															// 탐색용 데이터
	char cellPhone[SIZE];														// 이름과 핸드폰 번호
	int x = 0;																	// 2차 선택 구분 함수


	PERSON data;																// 구조체 포인터
	
	printf("\n");																// 2차 목록
	printf("□ [탐색하고자 하는 내용 선택] (다른 숫자입력시 종료\n");
	printf("\n");
	printf("□ 1.[이름]  2.[번호]\n");
	printf("\n");
	printf("□               [입력] : ");
	scanf_s("%d", &x);															// 문자를 입력받아 x값에 저장함으로
																				// 입력 받은 값에 따라 이름검색과 
																				// 번호 검색 기능으로 구분된다

																				////////////////////////////////////
	if (x == 1) {																// 이름 검색

		fseek(fp, 0, SEEK_SET);													// 파일 처음으로 이동
		while (getchar() != '\n');												// 엔터값 입력시 까지 반복

		printf("\n□ [탐색하고자 하는 내용 입력] : ");
		
		gets_s(name);															// 입력받은 이름 탐색

		printf("\n");
		printf("□  이름  // 핸드폰번호  // 특징 \n");							// 출력 형태
		while (!feof(fp)) {														// 파일의 끝까지 반복
			
			fread(&data, sizeof(data), 1, fp);									// 파일을 1 데이터 크기만큼씩 
																				// 이동하며읽는다

			if (strcmp(data.name, name) == 0) {									// 입력 받은 내용과 일치시출력
				print_record(data);												// 값 출력

			}
			
		}
	}
		
																				/////////////////////////////////////
	else if (x == 2) {															// 전화번호 검색
		fseek(fp, 0, SEEK_SET);													// 파일 처음으로 이동
		while (getchar() != '\n');												// 엔터값 입력시 까지 반복

		printf("□ 탐색하고자 하는 내용 입력 : ");


		gets_s(cellPhone);														// 입력받은 번호 탐색

		printf("\n");
		printf("□  이름  // 핸드폰번호  // 특징 \n");							// 출력 형태

		while (!feof(fp)) {														// 파일의 끝까지 반복
			

			fread(&data, sizeof(data), 1, fp);									// 파일을 1 데이터 크기만큼씩 
																				// 이동하며 읽는다

			if (strcmp(data.cellPhone, cellPhone) == 0) {						// 출력
				print_record(data);

			}
			
		}	
	}

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			2번 목록 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

																				////////////////////////////////////
void print_all_data(FILE *fp) {													// 모든 데이터 출력

	PERSON data;																// 구조체 포인터
	char buffer [100];

	printf("\n");
	printf("□  이름  // 핸드폰번호  // 특징 \n");								// 출력 형태

	fseek(fp, 0, SEEK_SET);														// 파일의 처음으로 이동
	while (getchar() != '\n');													// 엔터값 입력이 나올때까지 반복

	while (!feof(fp)) {															// 파일이 끝이 나올때까지 반복
																				
		fread(&data, sizeof(data), 1, fp);										// 데이터 크기 단위로 읽어온다
		print_record(data);														// 읽어온 데이터를 출력

	} 
	/*
	printf("%s", token);														// 토큰단위로 나누어 보는중
	*/
}																				// 데이터가 없을 시 오류값 나옴



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			1번 검색 기능 출력
//			2번 목록 출력 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

																				////////////////////////////////////
void print_record(PERSON data) {												// 저장된 내용 출력

	printf("□ %s //", data.name);												// 순서대로 이름, 핸드폰 번호, 추가
	printf(" %s //", data.cellPhone);								
	printf(" %s\n", data.etc);	
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			3번 추가 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                                                                ////////////////////////////////////
void add_record(FILE *fp) {														// 파일에 데이터 추가
	PERSON data;																// 구조체 포인터

	while (getchar() != '\n');													// 엔터값 입력 나올때까지 반복

	printf("□    이름    : ");	gets_s(data.name);								// 저장할 이름 입력

	printf("□ 핸드폰번호 : ");	gets_s(data.cellPhone);							// 저장할 번호 입력

	printf("□    특징    : ");	gets_s(data.etc);								// 저장할 특징 입력

	fseek(fp, 0, SEEK_END);														// 파일의 끝으로 이동
	fwrite(&data, sizeof(data), 1, fp);											// 파일의 끝에 저장	

	/*
	token = strtok(data.etc, seps);												// data.etc를 기준으로 
																				// 토큰단위로 구분

	while (token != NULL){														// NULL값까지 반복
	
		token = strtok(NULL, seps);												//
	}


	*/
	


 
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			4번 삭제 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

																				////////////////////////////////////
void delete_record(FILE *fp) {
	char name[SIZE];															// 탐색용 데이터
	char cellPhone[SIZE];														// 이름과 핸드폰 번호
	int x = 0;																	// 삭제 내용 구분용

	PERSON data;																// 구조체 포인터

	printf("\n");
	printf("□ [삭제하고자 하는 내용 선택] (다른 숫자입력시 종료\n");
	printf("\n");
	printf("□ 1.[이름]  2.[번호]\n");
	printf("\n");
	printf("□               [입력] : ");
	scanf_s("%d", &x);															// 입력받은 값에 따라 이름,번호검색


	// 이름 검색
	if (x == 1) {
		fseek(fp, 0, SEEK_SET);													// 파일 처음으로 이동
		while (getchar() != '\n');												// 엔터값이 나올때 까지 반복

		printf("\n□ [삭제하고자 하는 내용 입력] : ");

		gets_s(name);															// 입력받은 이름 탐색

		printf("\n");
		printf("□  이름  // 핸드폰번호  // 특징 \n");							// 출력 형태
		while (!feof(fp)) {														// 파일의 끝까지 반복

			fread(&data, sizeof(data), 1, fp);									// 데이터 사이즈 단위로 읽음
			if (strcmp(data.name, name) == 0) {									//  입력 받은 내용과 일치시출력

				print_record(data);
			

			}

			
		}
	}

	// 전화번호 검색
	else if (x == 2) {
		fseek(fp, 0, SEEK_SET);													// 파일 처음으로 이동
		while (getchar() != '\n');												// 엔터값이 나올때 까지 반복

		printf("□ 삭제하고자 하는 내용 입력 : ");


		gets_s(cellPhone);														// 입력받은 번호 탐색

		printf("\n");
		printf("□  이름  // 핸드폰번호  // 특징 \n");							// 출력 형태
		while (!feof(fp)) {														// 파일의 끝까지 반복

			fread(&data, sizeof(data), 1, fp);									// 데이터 사이즈 단위로 읽음
			if (strcmp(data.cellPhone, cellPhone) == 0) {						// 출력
				print_record(data);
				/*break;*/														// 번호 중복 미구현

				
			}

		}

	}


}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			5번 종료 기능
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

																				////////////////////////////////////
void system_down() {															// 종료 시 출력

	printf("\n");
	printf("□ 프로그램을 종료합니다.\n");
	printf("□ 아무키나 누르세요.\n");

	while (!_kbhit());															// 키보드의 아무키나 누르면 작동
	fflush(stdin);

}	